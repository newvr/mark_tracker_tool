#!/usr/bin/env python
import roslib
import rospy
import numpy
import time
import sys
from gazebo_msgs.msg import ModelState
from visualization_msgs.msg import Marker
from sensor_msgs.msg import JointState
from std_srvs.srv import Empty, EmptyResponse
import tf
from tf.msg import tfMessage
from tf.transformations import (quaternion_from_euler,
                                euler_from_quaternion)
from mark_tracker_tools.srv import *
from os import chdir
import functools
import math


def dotProduct(a, b):
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]


def crossProduct(a, b):
    x = a[1] * b[2] - a[2] * b[1]
    y = a[2] * b[0] - a[0] * b[2]
    z = a[0] * b[1] - a[1] * b[0]
    return [x, y, z]


def sign(var):
    """
    signe function
    """
    if var > 0:
        return 1
    if var == 0:
        return 0
    return -1


class GlitchEraser:

    """
    class to broadcast and publish to rospy
    The idea is to create a relay where
    ar_track_alvar will publish the potientially wrong data.
    (because if will let the AR_track_alvar in the real /tf topic,
        there would be no way of removing the wrong messages)
    """

    def __init__(self):

        self.old_vector = []

        # self.listener = tf.TransformListener()
        self.broadcaster = tf.TransformBroadcaster()
        self.pub_tf_track = rospy.Publisher(
            "/tf_relay_track", tfMessage, queue_size=1)

        rospy.Subscriber("tf_relay_track", tfMessage, self.callback)

    def callback(self, data):

        trans = [data.transforms[0].transform.translation.x,
                 data.transforms[0].transform.translation.y,
                 data.transforms[0].transform.translation.z]
        rot = [data.transforms[0].transform.rotation.x,
               data.transforms[0].transform.rotation.y,
               data.transforms[0].transform.rotation.z,
               data.transforms[0].transform.rotation.w
               ]

        transformer = tf.TransformerROS()
        mat_A = numpy.matrix(transformer.fromTranslationRotation(trans,
                                                                 rot))

        A1 = numpy.matrix([[1.], [0.], [0.], [1]])
        A2 = numpy.matrix([[0.], [1.], [0.], [1]])
        A3 = numpy.matrix([[0.], [0.], [1.], [1]])

        B1 = mat_A * A1
        B2 = mat_A * A2
        B3 = mat_A * A3

        print "B3", B3
        print "trans", trans

        A1B1 = numpy.array([B1.item(0) - 1., B1.item(0) - 0., B1.item(0) - 0.])
        A3B3 = numpy.array([B3.item(0), B3.item(0) - 0., B3.item(0) - 0.])

        vectb1 = [B1.item(0) - trans[0], B1.item(1) - trans[1],
                  B2.item(2) - trans[2]]

        vectb2 = [B2.item(0) - trans[0], B2.item(1) - trans[1],
                  B2.item(2) - trans[2]]

        N1 = numpy.array([0, 0, 1])
        N2 = crossProduct(vectb1, vectb2)
        print " ectb1, vectb2,", vectb1, vectb2
        print "ooooooooooooooooo", dotProduct(N1, N2)

        tot = dotProduct(N1, N2) + 1
        print tot
        # dist = math.sqrt(
        #     math.pow(mat_A[0].item(3),
        #              2) + math.pow(mat_A[1].item(3),
        #                            2) + math.pow(mat_A[2].item(3), 2))

        # dist_bis = math.sqrt(
        #     math.pow(mat_C[0].item(3),
        #              2) + math.pow(mat_C[1].item(3),
        #                            2) + math.pow(mat_C[2].item(3), 2))

        # print "dist=", dist, "dist_bis=", dist_bis
        # dist_bis = math.sqrt(
        #     math.pow(trans_bis[0] - trans[0],
        #              2) + math.pow(trans_bis[1] - trans[1],
        #                            2) + math.pow(trans_bis[2] - trans[2], 2))

        # print "dist", dist, "dist_bis", dist_bis

        if B3.item(2) > trans[2]:
            print"--------------------"
            print "GLITCH"
            print data.transforms[0].child_frame_id
            print tot

        else:
            print"--------------------"
            print "pasglitche"
            print data.transforms[0].child_frame_id
            print tot

            self.broadcaster.sendTransform(trans, rot, rospy.Time.now(),
                                           data.transforms[0].child_frame_id,
                                           data.transforms[0].header.frame_id)


def main(args):
    """
        main
    """

    rospy.init_node('glitch_eraser', anonymous=True)

    GlitchEraser()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print "Shutting down"
        # mon_fichier_speed.close()

        print "Finished."


if __name__ == '__main__':
    main(sys.argv)
